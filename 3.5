 const config = {
        // –º—ñ–∂ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º–∏ –∫–ª–∞–≤—ñ—à
        typingDelayMin: 50,
        typingDelayMax: 150,
        typingLongPauseChance: 0.12, // 12 % —à–∞–Ω—Å ¬´–∑–∞–¥—É–º–∞—Ç–∏—Å—å¬ª
        typingLongPauseMin: 280,
        typingLongPauseMax: 800,

        // –ø–µ—Ä–µ–¥ / –ø—ñ—Å–ª—è –ø–æ–ª—è
        preFieldDelayMin: 300,
        preFieldDelayMax: 800,
        postFieldDelayMin: 80,
        postFieldDelayMax: 200,

        // —à–∞–Ω—Å –≤–µ–ª–∏–∫–æ—ó –ø–∞—É–∑–∏ –ø—ñ—Å–ª—è –ø–æ–ª—è
        longRestChance: 0.15,
        longRestMin: 600,
        longRestMax: 1800,

        // ¬´–¥–∂–∏—Ç—Ç–µ—Ä¬ª –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤
        delayedFieldJitterMin: 50,
        delayedFieldJitterMax: 250,

        // –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è DOM-–µ–ª–µ–º–µ–Ω—Ç–∞
        waitForElementMaxAttempts: 50,
        waitForElementInterval: 200,
    };

    /* ------------------------------------------------------------------
       üèó  –£—Ç–∏–ª—ñ—Ç–∏
    ------------------------------------------------------------------ */
    const wait = (ms) => new Promise((r) => setTimeout(r, ms));

    // –ü—Å–µ–≤–¥–æ-–≥–∞—É—Å–æ–≤–∏–π (triangular) —Ä–æ–∑–ø–æ–¥—ñ–ª: –±—ñ–ª—å—à—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ —Å–µ—Ä–µ–¥–∏–Ω–∏
    function weightedRandomDelay(min, max) {
        const r = (Math.random() + Math.random()) / 2; // 0‚Äì1  –ø—ñ–∫ ‚âà0.5
        return Math.round(min + (max - min) * r);
    }



    let lastMessageId = 0;

    async function checkTelegram() {
        try {
            console.log('üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å Telegram‚Ä¶');

            const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates`);
            const data = await res.json();

            if (!data.ok) {
                console.warn('‚ö†Ô∏è Telegram API –ø–æ–≤–µ—Ä–Ω—É–≤ –ø–æ–º–∏–ª–∫—É:', data);
                return;
            }

            if (data.result.length === 0) {
                console.log('üì≠ –ü–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ–º–∞—î');
                return;
            }

            const lastMsg = data.result[data.result.length - 1];

            if (lastMsg.update_id <= lastMessageId) {
                console.log('üîÇ –ù–µ–º–∞—î –Ω–æ–≤–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è (update_id –≤–∂–µ –æ–±—Ä–æ–±–ª–µ–Ω–æ)');
                return;
            }

            lastMessageId = lastMsg.update_id;
            console.log('üì® –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è:', lastMsg.message?.text || '(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)');

            console.log('üïµÔ∏è‚Äç‚ôÇÔ∏è –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –ø–æ—è–≤–∏ select2 –≤ DOM‚Ä¶');
            let select2 = null;
            for (let i = 0; i < 120; i++) { // 30 —Å–µ–∫ = 120 x 250–º—Å
                select2 = document.getElementById('f1-life-situation-select2');
                if (select2) {
                    console.log('‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ select2');
                    break;
                }
                await wait(250);
            }

            if (!select2) {
                console.warn('‚ùå select2 –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
                return;
            }

            const option = select2.querySelector(`option[value="${STEP3_SELECT_2_VALUE}"]`);
            if (!option) {
                console.warn(`‚ùå –û–ø—Ü—ñ—è ${STEP3_SELECT_2_VALUE} –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞`);
                return;
            }

            option.setAttribute('selected', 'selected');
            triggerEvents(select2);
            console.log(`‚úÖ select2 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ ${STEP3_SELECT_2_VALUE}`);

        } catch (err) {
            console.error("‚ùå –ü–æ–º–∏–ª–∫–∞ —É checkTelegram:", err);
        }
    }
    // üîÅ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥
    function startTelegramLoop() {
        if (!isScriptStopped) {
            checkTelegram().finally(() => {
                setTimeout(startTelegramLoop, 2000); // üîÅ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫
            });
        }
    }


    // –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π (–∑–∞–ª–∏—à–∏–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
    function randomDelay(min, max) {
        return Math.floor(Math.random() * (max - min + 1)) + min;
    }

    function triggerEvents(el) {
        el.dispatchEvent(new Event('input', { bubbles: true }));
        el.dispatchEvent(new Event('change', { bubbles: true }));
        el.dispatchEvent(new Event('blur', { bubbles: true }));
    }

    async function sendTelegramMessage(text) {
        try {
            const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
            await fetch(url, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
            });
        } catch (err) {
            console.error('‚ùå Telegram:', err);
        }
    }

    /* ------------------------------------------------------------------
       üìñ  –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
    ------------------------------------------------------------------ */
    function waitForElement(id) {
        return new Promise((resolve) => {
            let attempts = 0;
            const int = setInterval(() => {
                if (isScriptStopped) { // –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑—É–ø–∏–Ω–∫–∏ —Å–∫—Ä–∏–ø—Ç–∞
                    clearInterval(int);
                    resolve(null);
                    return;
                }
                const el = document.getElementById(id);
                if (el) {
                    clearInterval(int);
                    console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
                    resolve(el);
                } else if (++attempts >= config.waitForElementMaxAttempts) {
                    clearInterval(int);
                    console.warn(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
                    resolve(null);
                }
            }, config.waitForElementInterval);
        });
    }

    /* ------------------------------------------------------------------
       ‚å®Ô∏è  –ù–∞–±—ñ—Ä —Ç–µ–∫—Å—Ç—É ¬´–ø–æ-–ª—é–¥—Å—å–∫–∏¬ª
    ------------------------------------------------------------------ */
    async function typeValue(el, value) {
        if (isScriptStopped) return;
        el.value = '';
        triggerEvents(el);
        await wait(weightedRandomDelay(60, 140));

        for (const char of String(value)) {
            if (isScriptStopped) return;
            el.value += char;
            el.dispatchEvent(new Event('input', { bubbles: true }));
            await wait(weightedRandomDelay(config.typingDelayMin, config.typingDelayMax));
            if (Math.random() < config.typingLongPauseChance) {
                await wait(weightedRandomDelay(config.typingLongPauseMin, config.typingLongPauseMax));
            }
        }
        triggerEvents(el);
    }

    /* ------------------------------------------------------------------
       üñº  –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è CAPTCHA (GPT-4o Vision)
    ------------------------------------------------------------------ */
    async function imageToBase64(img) {
        return new Promise((res) => {
            const canvas = document.createElement('canvas');
            canvas.width = img.width;
            canvas.height = img.height;
            const ctx = canvas.getContext('2d');
            ctx.drawImage(img, 0, 0);
            res(canvas.toDataURL('image/png'));
        });
    }

    let skipSubmit = false;

    async function recognizeCaptcha(imageDataUrl) {
        if (isScriptStopped) return '1';
        console.log('üîç –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á—ñ –≤ OpenAI‚Ä¶');

        for (const model of OPENAI_MODELS) {
            if (isScriptStopped) return '1';
            try {
                const response = await fetch('https://api.openai.com/v1/chat/completions', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        Authorization: `Bearer ${OPENAI_API_KEY}`,
                        'OpenAI-Beta': 'assistants=v1',
                        'OpenAI-Project': OPENAI_PROJECT_ID,
                    },
                    body: JSON.stringify({
                        model: model,
                        messages: [
                            {
                                role: 'user',
                                content: [
                                    {
                                        type: 'text',
                                        text: 'Text: "Extract only the exact 5-character CAPTCHA code (a-z, 0-9). No explanations, no quotes, no extra text", it is only lowercase English letters and numbers are allowed.',
                                    },
                                    {
                                        type: 'image_url',
                                        image_url: { url: imageDataUrl },
                                    },
                                ],
                            },
                        ],
                        max_tokens: 10,
                    }),
                });

                const result = await response.json();

                if (!response.ok) {
                    console.warn(`‚ö†Ô∏è –ú–æ–¥–µ–ª—å ${model} –ø–æ–≤–µ—Ä–Ω—É–ª–∞ –ø–æ–º–∏–ª–∫—É:`, result);
                    continue; // –ø—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å
                }

                console.log(`üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI (${model}):`, result);
                console.log(`‚úÖ –ú–æ–¥–µ–ª—å ${model} —Å–ø—Ä–∞—Ü—é–≤–∞–ª–∞ —É—Å–ø—ñ—à–Ω–æ`);

                let captchaText = result?.choices?.[0]?.message?.content?.trim();
                if (!captchaText || captchaText.length !== 5) {
                    console.warn(`‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI (${captchaText}). –í–∏–∫–æ—Ä. "1"`);
                    skipSubmit = true;
                    return '1';
                } else {
                    skipSubmit = false;
                    return captchaText;
                }

            } catch (err) {
                console.error(`‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ –º–æ–¥–µ–ª–ª—é ${model}:`, err);
                // –ø—Ä–æ–±—É—î–º–æ –Ω–∞—Å—Ç—É–ø–Ω—É –º–æ–¥–µ–ª—å
            }
        }

        console.error('‚ùå –£—Å—ñ –º–æ–¥–µ–ª—ñ –Ω–µ –¥–∞–ª–∏ –≤—ñ–¥–ø–æ–≤—ñ–¥—ñ. –ü–æ–≤–µ—Ä—Ç–∞—î–º–æ "1"');
        skipSubmit = true;
        return '1';
    }

    async function typeCaptchaLikeHuman(el, text) {
        if (isScriptStopped) return;
        el.focus();
        el.value = '';
        triggerEvents(el);

        for (const char of text) {
            if (isScriptStopped) return;
            el.dispatchEvent(new KeyboardEvent('keydown', { key: char, bubbles: true }));
            el.value += char;
            triggerEvents(el);
            await wait(weightedRandomDelay(90, 160));
        }

        triggerEvents(el);
        el.blur();
    }

    async function solveCaptcha() {
        if (isScriptStopped) return;
        const imgEl = await waitForElement('captchaImage');
        const inputEl = await waitForElement('answer');
        if (!imgEl || !inputEl) return;

        const base64 = await imageToBase64(imgEl);
        const text = await recognizeCaptcha(base64);
        await typeCaptchaLikeHuman(inputEl, text);
        inputEl.style.cssText = 'border:2px solid lime;background:#eaffea;';
        setTimeout(() => (inputEl.style.cssText = ''), 3000);
    }

    /* ------------------------------------------------------------------
       üóí  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
    ------------------------------------------------------------------ */
    const delayedFields = {
        'residence-address-county-0': 2000,
        'residence-address-municipality-0': 2000,
        'residence-address-street-0': 2000,
        'fs13-0-travel-doc-type': 500,
        's42-check-gdpr-info': 700,
        submitter1: 650,
    };

    const step1Fields = [
        ['fs3-name-10', USER_NAME, 'text'],
        ['fs1-surname-10', USER_SURNAME, 'text'],
        [
            'fs7-date-of-birth0',
            async (el) => {
                if (isScriptStopped) return;
                el.focus();
                await wait(120);
                el.value = USER_BIRTHDATE;
                triggerEvents(el);
                await wait(240);
                // –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä–∞ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫—Ä–∞–ø–æ–∫ (–æ—Ä–∏–≥. –ª–æ–≥—ñ–∫–∞)
                for (let i = 0; i < 10; i++) {
                    if (isScriptStopped) return;
                    el.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowLeft', bubbles: true }));
                    el.dispatchEvent(new KeyboardEvent('keyup', { key: 'ArrowLeft', bubbles: true }));
                    await wait(50);
                }
                for (let i = 0; i < 2; i++) {
                    if (isScriptStopped) return;
                    el.dispatchEvent(new KeyboardEvent('keydown', { key: 'Delete', bubbles: true }));
                    el.dispatchEvent(new KeyboardEvent('keyup', { key: 'Delete', bubbles: true }));
                    await wait(50);
                }
                triggerEvents(el);
            },
            'custom',
        ],
        ['s41-delivery-phone-captcha', USER_PHONE, 'text'],
        ['email0', USER_EMAIL, 'text'],
    ];

    const step2Fields = [
       // [USER_CITY, true, 'radio'], // USER_CITY —Ç–µ–ø–µ—Ä –¥–∏–Ω–∞–º—ñ—á–Ω–æ –∑–º—ñ–Ω—é—î—Ç—å—Å—è
        ['s42-check-gdpr-info', true, 'checkbox'],
        ['fs13-0-travel-doc-type', '1', 'select'],
        ['fs13-travel-doc-number', USER_PASSPORT, 'text'],
        ['submitter1', null, 'click'],
    ];

    /* ------------------------------------------------------------------
       üîÑ  –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ (human-like)
    ------------------------------------------------------------------ */

  const HUMAN_MODE = 1; // 0 = human-like (–∑ –ø–∞—É–∑–∞–º–∏), 1 = fast (–º–æ–º–µ–Ω—Ç–∞–ª—å–Ω–æ)

 async function fillFields(fields, label) {
    if (isScriptStopped) return;
    for (const [id, value, type] of fields) {
        if (isScriptStopped) return;
        let el = document.getElementById(id);

        if (!el && type === 'radio') {
            el = [...document.querySelectorAll('input[type="radio"][name="offices"]')]
                .find((n) => n.id && n.id.startsWith(USER_CITY));
            if (el && HUMAN_MODE === 0) {
                const now = new Date().toLocaleString();
                const msg = `üïí ${now}\nüÜî ${el.id}\n‚û°Ô∏è ${STEP3_SELECT_1_VALUE} --> ${STEP3_SELECT_2_VALUE}`;
                console.log(msg);
                await sendTelegramMessage(msg);
            }
        }
        if (!el) continue;

        if (HUMAN_MODE === 0) {
            // –õ—é–¥—Å—å–∫—ñ –ø–∞—É–∑–∏
            const preDelay = delayedFields[id]
                ? delayedFields[id] + randomDelay(config.delayedFieldJitterMin, config.delayedFieldJitterMax)
                : weightedRandomDelay(config.preFieldDelayMin, config.preFieldDelayMax);
            await wait(preDelay);
            if (isScriptStopped) return;
            el.focus();
            await wait(weightedRandomDelay(50, 180));
        } else {
            el.focus();
        }

        try {
            switch (type) {
                case 'text':
                    if (HUMAN_MODE === 0) {
                        await typeValue(el, value);
                    } else {
                        el.value = value;
                        triggerEvents(el);
                    }
                    break;
                case 'select':
                    el.value = value;
                    triggerEvents(el);
                    break;
                case 'checkbox':
                    el.checked = Boolean(value);
                    triggerEvents(el);
                    break;
                case 'click':
                    el.click();
                    break;
                case 'custom':
                    await value(el);
                    break;
                case 'radio':
                    el.checked = true;
                    triggerEvents(el);
                    break;
            }
        } catch (e) {
            console.error(`[${label}] ${id}:`, e);
        }

        if (HUMAN_MODE === 0) {
            await wait(weightedRandomDelay(config.postFieldDelayMin, config.postFieldDelayMax));
            if (Math.random() < config.longRestChance) {
                await wait(weightedRandomDelay(config.longRestMin, config.longRestMax));
            }
        } else {
          await wait(800 + Math.floor(Math.random() * 501)); // 800-1300 –º—Å
        }
    }
}

    // 1. –§—É–Ω–∫—Ü—ñ—è –∑ –ø–∞—É–∑–æ—é –Ω–∞ 3.5—Å + —Ä—É—á–Ω–µ –ø—ñ–¥—Ç–≤–µ—Ä–¥–∂–µ–Ω–Ω—è
async function waitWithPauseOption(ms = 3500) {
    return new Promise((resolve) => {
        // –°—Ç–≤–æ—Ä—é—î–º–æ –µ–ª–µ–º–µ–Ω—Ç –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
        const pauseBox = document.createElement('div');
        pauseBox.id = 'pauseBox';
        pauseBox.innerHTML = `
            <div style="position:fixed;top:20px;left:50%;transform:translateX(-50%);background:#fffae6;padding:15px;border:1px solid #ccc;border-radius:8px;z-index:9999;font-family:sans-serif;">
                ‚è≥ –ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–Ω–æ —á–µ—Ä–µ–∑ ${Math.floor(ms/1000)}—Å –∞–±–æ <button id="pauseNowBtn">–ü–∞—É–∑–∞</button>
            </div>
        `;
        document.body.appendChild(pauseBox);

        let paused = false;

        // –Ø–∫—â–æ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ "–ü–∞—É–∑–∞" ‚Äî —Å—Ç–∞–≤–∏–º–æ —Ñ–ª–∞–≥
        document.getElementById('pauseNowBtn').onclick = () => {
            paused = true;
            pauseBox.innerHTML = `
                <div style="background:#d9edf7;padding:15px;border:1px solid #bce8f1;border-radius:8px;">
                    ‚è∏Ô∏è –ü–∞—É–∑–∞ –∞–∫—Ç–∏–≤–Ω–∞. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å <button id="continueBtn">–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏</button>
                </div>
            `;
            document.getElementById('continueBtn').onclick = () => {
                document.getElementById('pauseBox')?.remove();
                resolve();
            };
        };

        // –¢–∞–π–º–µ—Ä: —è–∫—â–æ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É–ª–∏ ‚Äî –ø—Ä–æ–¥–æ–≤–∂—É—î–º–æ
        setTimeout(() => {
            if (!paused) {
                document.getElementById('pauseBox')?.remove();
                resolve();
            }
        }, ms);
    });
}

    /* ------------------------------------------------------------------
       üöÄ  –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
    ------------------------------------------------------------------ */
    async function runMainScenario() {
        if (isScriptStopped) {
            console.log('–°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –ó–∞–ø—É—Å–∫ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ.');
            return;
        }


        // –û—á–∏—â–µ–Ω–Ω—è –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è
        await navigator.clipboard.writeText('');
        console.log('üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω–æ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è PIN');

        await wait(weightedRandomDelay(800, 1500));
        // üîò –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è langSK –æ–¥—Ä–∞–∑—É –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
        const langBtn = await waitForElement('langSK');
        if (langBtn) {
            langBtn.click();
            console.log('üöÄ "langSK" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
            await wait(2500); // –¥–∞—î–º–æ —á–∞—Å –∑'—è–≤–∏—Ç–∏—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É

            const captchaError = [...document.querySelectorAll('span, div')]
                .find(el => el.textContent?.toLowerCase().includes('nespr√°vny k√≥d') || el.textContent?.toLowerCase().includes('nespr√°vne'));

            if (captchaError) {
                console.warn('‚ùå –ö–∞–ø—á–∞ –Ω–µ–≤—ñ—Ä–Ω–∞. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
                setTimeout(() => location.reload(), 3000); // –¥–∞—î–º–æ 3 —Å–µ–∫ —ñ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ
                return;
            }
        } else {
            console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ langSK –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
        }

        // üïí –ß–µ—Ä–µ–∑ 45 —Å–µ–∫ –ø–µ—Ä–µ–≤—ñ—Ä–∫–∞ –±—É—Ñ–µ—Ä–∞ –æ–±–º—ñ–Ω—É
        setTimeout(async () => {
            if (isScriptStopped) return;
            try {
                const clipboard = await navigator.clipboard.readText();
                if (!clipboard.trim()) {
                    console.warn('üïí –ß–µ—Ä–µ–∑ 60 —Å–µ–∫ –±—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –ø–æ—Ä–æ–∂–Ω—ñ–π. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
                    handleNoSlotsFound(); // –í–∏–∫–ª–∏–∫–∞—î–º–æ –ª–æ–≥—ñ–∫—É –ø–µ—Ä–µ—Ö–æ–¥—É –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
                } else {
                    console.log('‚úÖ –ë—É—Ñ–µ—Ä –æ–±–º—ñ–Ω—É –ù–ï –ø–æ—Ä–æ–∂–Ω—ñ–π. –ù–µ –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂—É—î–º–æ.');
                }
            } catch (err) {
                console.error('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ –ø—Ä–∏ —á–∏—Ç–∞–Ω–Ω—ñ –±—É—Ñ–µ—Ä–∞:', err);
            }
        }, 45000); // 45000 –º—Å = 45 —Å–µ–∫

        await wait(2239); // –¥–∞—î–º–æ —á–∞—Å –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É
        // 1Ô∏è‚É£ CAPTCHA
        await solveCaptcha();
        if (isScriptStopped) return;

        // 2Ô∏è‚É£ Step 1
        await fillFields(step1Fields, 'Step 1');
        if (isScriptStopped) return;

        if (!skipSubmit) {
            const btn = document.getElementById('loadSecondFormButton');
            if (btn) {
                btn.click();
                console.log('üöÄ "loadSecondFormButton" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
                await wait(2500); // –¥–∞—î–º–æ —á–∞—Å –∑'—è–≤–∏—Ç–∏—Å—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—é –ø—Ä–æ –ø–æ–º–∏–ª–∫—É

                const captchaError = [...document.querySelectorAll('span, div')]
                    .find(el => el.textContent?.toLowerCase().includes('nespr√°vny k√≥d') || el.textContent?.toLowerCase().includes('nespr√°vne'));
                if (captchaError) {
                    console.warn('‚ùå –ö–∞–ø—á–∞ –Ω–µ–≤—ñ—Ä–Ω–∞. –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è...');
                    handleNoSlotsFound(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ —Å–ø—Ä–æ–±–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
                    return;
                }

            } else {
                console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ loadSecondFormButton –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
            }
        } else {
            console.warn('üö´ –ö–∞–ø—á–∞ –Ω–µ–≤—ñ—Ä–Ω–∞. –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞');
            handleNoSlotsFound(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ —Å–ø—Ä–æ–±–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
            return;
        }

        // 3Ô∏è‚É£ –ß–µ–∫–∞—î–º–æ —Å–µ–ª–µ–∫—Ç –º—ñ—Å—Ç
        const triggerStep2Button = await waitForElement('f1-life-situation-select2');
        if (!triggerStep2Button) {
            console.error('‚ùå select –¥–ª—è –º—ñ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            handleNoSlotsFound(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ —Å–ø—Ä–æ–±–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
            return;
        }

        // 4Ô∏è‚É£ PIN-–∫–æ–¥ ‚Üí –¥–æ–≤–∞–Ω—Ç–∞–∂—É—î–º–æ selects
        let odoslatClicked = false;

        const loadSecondFormBtn = await waitForElement('loadSecondFormButton'); // –¶–µ —Ç–∞ –∂ –∫–Ω–æ–ø–∫–∞, —â–æ —ñ —Ä–∞–Ω—ñ—à–µ
        if (loadSecondFormBtn) {
            loadSecondFormBtn.addEventListener('click', () => {
                odoslatClicked = true;
            });
        }

        async function waitForPINConditions() {
            while (!odoslatClicked && skipSubmit) { // –ß–µ–∫–∞—î–º–æ –∞–±–æ –∫–ª—ñ–∫—É, –∞–±–æ –ø–æ–º–∏–ª–∫–∏ –∫–∞–ø—á—ñ
                await wait(500);
                if (isScriptStopped) return;
            }
        }

        await waitForPINConditions();
        if (isScriptStopped) return;

        const pinCodeEl = await waitForElement('pin-code');
        if (pinCodeEl) {
            await wait(10500);
            if (isScriptStopped) return;
            try {
                const clipboard = await navigator.clipboard.readText();
                const pin = clipboard.trim();
                if (!/^\d{4,8}$/.test(pin)) {
                    console.warn('‚ö†Ô∏è PIN –∑ –±—É—Ñ–µ—Ä–∞ –Ω–µ —Å—Ö–æ–∂–∏–π –Ω–∞ –∫–æ–¥:', pin);
                }
                pinCodeEl.focus();
                await typeValue(pinCodeEl, pin);
                console.log(`üîê PIN –∑ –±—É—Ñ–µ—Ä–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: ${pin}`);

                const submitBtn = document.getElementById('loadMain');
                if (submitBtn) {
                    submitBtn.click();
                    console.log('üöÄ "Odosla≈•" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
                }

                await wait(3150);
                if (isScriptStopped) return;

                const select1 = document.getElementById('f1-life-situation-select1');
                const option1 = select1?.querySelector(`option[value="${STEP3_SELECT_1_VALUE}"]`);
                if (option1) {
                    option1.setAttribute('selected', 'selected');
                    triggerEvents(select1);
                    console.log('‚úÖ select1 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                }

                await waitWithPauseOption(3500);
                if (isScriptStopped) return;


                const select2 = document.getElementById('f1-life-situation-select2');
                const option2 = select2?.querySelector(`option[value="${STEP3_SELECT_2_VALUE}"]`);
                if (option2) {
                    option2.setAttribute('selected', 'selected');
                    triggerEvents(select2);
                    console.log('‚úÖ select2 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
                }
            } catch (err) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ PIN-–∫–æ–¥–æ–º:', err);
                handleNoSlotsFound(); // –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ PIN, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –º—ñ—Å—Ç–æ
                return;
            }
        }

        console.log('üìù –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞‚Ä¶');

        await wait(weightedRandomDelay(700, 1200));
        if (isScriptStopped) return;


        await wait(1546);
        if (isScriptStopped) return;

      const allAvailableSlots = [
    ...document.querySelectorAll('input[type="radio"][name="offices"]')
].filter(el =>
    el.id &&
    el.id.includes(' -') &&
    el.offsetParent !== null &&
    !el.disabled
);

// –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Å–ª–æ—Ç, —è–∫–∏–π –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —è–∫–æ–≥–æ—Å—å –∑ –Ω–∞—à–∏—Ö USER_CITIES
let selectedSlot = null;
let selectedCity = null;

for (const city of USER_CITIES) {
    selectedSlot = allAvailableSlots.find(el => el.id.includes(`${city} -`));
    if (selectedSlot) {
        selectedCity = city;
        break;
    }
}

if (selectedSlot) {
    selectedSlot.click();
    console.log('‚úÖ –û–±—Ä–∞–Ω–æ —Å–ª–æ—Ç:', selectedSlot.id);

    const now = new Date().toLocaleString();
    const msg = `üü¢ ${now}\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º—ñ–Ω —É –Ω–∞—à–æ–º—É –º—ñ—Å—Ç—ñ:\n${selectedSlot.id}\n‚û°Ô∏è ${STEP3_SELECT_1_VALUE} ‚Üí ${STEP3_SELECT_2_VALUE}`;
    await sendTelegramMessage(msg);

    await wait(weightedRandomDelay(700, 1200));
    await fillFields(step2Fields, 'Step 2');

    const submitBtn = document.getElementById('submitter1');
    if (submitBtn) {
        submitBtn.click();
        console.log('üöÄ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
    }
    console.log('‚úÖ Step 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} else {
    // –ñ–æ–¥–Ω–æ–≥–æ –∑ –Ω–∞—à–∏—Ö –º—ñ—Å—Ç –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
    const now = new Date().toLocaleString();
    let msg = '';
    if (allAvailableSlots.length > 0) {
        msg = `üü° ${now}\n‚úîÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–µ—Ä–º—ñ–Ω (–ù–ï –Ω–∞—à–µ –º—ñ—Å—Ç–æ):\n${allAvailableSlots[0].id}\n‚û°Ô∏è ${STEP3_SELECT_1_VALUE} ‚Üí ${STEP3_SELECT_2_VALUE}`;
    }
    await sendTelegramMessage(msg);
    handleNoSlotsFound();
    return; // –î–∞–ª—ñ –Ω–µ –π–¥–µ–º–æ!
}
    }

    async function handleNoSlotsFound() {
        if (isScriptStopped) {
            console.log('–°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
            return;
        }

        currentCityIndex++;
        if (currentCityIndex < USER_CITIES.length) {
            USER_CITY = USER_CITIES[currentCityIndex];
            localStorage.setItem('currentCityIndex', currentCityIndex);
            console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞: ${USER_CITY}`);
            const reloadIn = Math.floor(Math.random() * (4500 - 2500 + 1)) + 2500;
            console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${reloadIn / 1000} —Å –¥–ª—è —Å–ø—Ä–æ–±–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞`);
            setTimeout(() => location.reload(), reloadIn);
        } else {
            console.log('üèÅ –£—Å—ñ –º—ñ—Å—Ç–∞ –ø–µ—Ä–µ–±—Ä–∞–Ω–æ, —Ç–µ—Ä–º—ñ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É.');
            localStorage.setItem('currentCityIndex', '0'); // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É –∑–Ω–æ–≤—É
            const reloadIn = Math.floor(Math.random() * (4500 - 2500 + 1)) + 2500;
            console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${reloadIn / 1000} —Å –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É –º—ñ—Å—Ç`);
            setTimeout(() => location.reload(), reloadIn);
        }
    }

    //–ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑—É–ø–∏–Ω–µ–Ω–∏–π
    if (!isScriptStopped) {
        runMainScenario();
    }else {
        console.log('–°–∫—Ä–∏–ø—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑—É–ø–∏–Ω–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" –¥–ª—è –∑–∞–ø—É—Å–∫—É.');
    }
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É Telegram –Ω–∞ —Ñ–æ–Ω—ñ

})();
