  const MANUAL_MODE = true; // true ‚Äî —á–µ–∫–∞—î —Ä—É—á–Ω–æ–≥–æ –≤–∏–±–æ—Ä—É —Å–µ–ª–µ–∫—Ç–∞ 2, false ‚Äî –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è

  async function runMainScenario() {
    if (isScriptStopped) {
        console.log('–°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ. –ó–∞–ø—É—Å–∫ –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–æ.');
        return;
    }

    await navigator.clipboard.writeText('');
    console.log('üßπ –ë—É—Ñ–µ—Ä –æ—á–∏—â–µ–Ω–æ –ø—ñ—Å–ª—è –≤—Å—Ç–∞–≤–ª–µ–Ω–Ω—è PIN');
    await wait(weightedRandomDelay(800, 1500));

    // –ö–Ω–æ–ø–∫–∞ –º–æ–≤–∏ (langSK)
    const langBtn = await waitForElement('langSK');
    if (langBtn) {
        langBtn.click();
        console.log('üöÄ "langSK" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
await wait(weightedRandomDelay(1100, 1500));
    } else {
        console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ langSK –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞!');
        return;
    }

    // --- –ü–∞—Ä–∞–ª–µ–ª—å–Ω–∏–π –∑–∞–ø—É—Å–∫ –∫–∞–ø—á—ñ —ñ –ø–æ–ª—ñ–≤ ---
    const captchaPromise = (async () => {
        const imgEl = await waitForElement('captchaImage');
        if (!imgEl) return null;
        const base64 = await imageToBase64(imgEl);
        return await recognizeCaptcha(base64);
    })();

    const fieldsPromise = fillFields(step1Fields, 'Step 1');

    // –ß–µ–∫–∞—î–º–æ –æ–±–∏–¥–≤–∞ –ø—Ä–æ—Ü–µ—Å–∏
    const [captchaText] = await Promise.all([captchaPromise, fieldsPromise]);
    if (isScriptStopped) return;

    // --- –í–≤–æ–¥–∏–º–æ –∫–∞–ø—á—É ---
    const inputEl = await waitForElement('answer');
    if (inputEl && captchaText) {
        await typeCaptchaLikeHuman(inputEl, captchaText);
        inputEl.style.cssText = 'border:2px solid lime;background:#eaffea;';
        setTimeout(() => (inputEl.style.cssText = ''), 3000);
    } else {
        console.warn('‚ùå –ù–µ –≤–¥–∞–ª–æ—Å—è –∑–Ω–∞–π—Ç–∏ –ø–æ–ª–µ –∫–∞–ø—á—ñ —á–∏ —Ç–µ–∫—Å—Ç –∫–∞–ø—á—ñ');
        handleNoSlotsFound();
        return;
    }

    // --- –ù–∞—Ç–∏—Å–∫–∞—î–º–æ ‚Äú–î–∞–ª—ñ‚Äù ---
    const btn = await waitForElement('loadSecondFormButton');
    if (btn) {
        btn.click();
        console.log('üöÄ "loadSecondFormButton" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
    } else {
        console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ loadSecondFormButton –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
        handleNoSlotsFound();
        return;
    }


        // 3Ô∏è‚É£ –ß–µ–∫–∞—î–º–æ —Å–µ–ª–µ–∫—Ç –º—ñ—Å—Ç
        const triggerStep2Button = await waitForElement('f1-life-situation-select2');
        if (!triggerStep2Button) {
            console.error('‚ùå select –¥–ª—è –º—ñ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
            handleNoSlotsFound(); // –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —ñ —Å–ø—Ä–æ–±–∞ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞
            return;
        }

        // 4Ô∏è‚É£ PIN-–∫–æ–¥ ‚Üí –¥–æ–≤–∞–Ω—Ç–∞–∂—É—î–º–æ selects
        let odoslatClicked = false;

        const loadSecondFormBtn = await waitForElement('loadSecondFormButton'); // –¶–µ —Ç–∞ –∂ –∫–Ω–æ–ø–∫–∞, —â–æ —ñ —Ä–∞–Ω—ñ—à–µ
        if (loadSecondFormBtn) {
            loadSecondFormBtn.addEventListener('click', () => {
                odoslatClicked = true;
            });
        }

        async function waitForPINConditions() {
            while (!odoslatClicked && skipSubmit) { // –ß–µ–∫–∞—î–º–æ –∞–±–æ –∫–ª—ñ–∫—É, –∞–±–æ –ø–æ–º–∏–ª–∫–∏ –∫–∞–ø—á—ñ
await wait(weightedRandomDelay(400, 600));
                if (isScriptStopped) return;
            }
        }

        await waitForPINConditions();
        if (isScriptStopped) return;

        const pinCodeEl = await waitForElement('pin-code');
        if (pinCodeEl) {
await wait(weightedRandomDelay(7000, 12000));
            if (isScriptStopped) return;
            try {
                const clipboard = await navigator.clipboard.readText();
                const pin = clipboard.trim();
                if (!/^\d{4,8}$/.test(pin)) {
                    console.warn('‚ö†Ô∏è PIN –∑ –±—É—Ñ–µ—Ä–∞ –Ω–µ —Å—Ö–æ–∂–∏–π –Ω–∞ –∫–æ–¥:', pin);
                }
                pinCodeEl.focus();
                await typeValue(pinCodeEl, pin);
                console.log(`üîê PIN –∑ –±—É—Ñ–µ—Ä–∞ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ: ${pin}`);

                const submitBtn = document.getElementById('loadMain');
                if (submitBtn) {
                    submitBtn.click();
                    console.log('üöÄ "Odosla≈•" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
                }

await wait(weightedRandomDelay(2900, 3550));
                if (isScriptStopped) return;

setSelectValueById('f1-life-situation-select1', STEP3_SELECT_1_VALUE);

await wait(weightedRandomDelay(200, 500));
                await waitWithPauseOption(3200);
                if (isScriptStopped) return;


              if (MANUAL_MODE) {
    // –ß–µ–∫–∞—î–º–æ, –ø–æ–∫–∏ –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á –≤–∏–±–µ—Ä–µ select2 –≤—Ä—É—á–Ω—É
    const select2 = await waitForElement('f1-life-situation-select2');
    if (!select2) return;
    console.log('‚è≥ MANUAL: –ß–µ–∫–∞—é –≤–∏–±–æ—Ä—É —Å–µ–ª–µ–∫—Ç–∞ 2...');
    await new Promise((resolve) => {
        select2.addEventListener('change', () => setTimeout(resolve, 400), { once: true });
    });
    console.log('‚úÖ MANUAL: –í–∏–±—Ä–∞–Ω–æ select2, –π–¥–µ–º–æ –¥–∞–ª—ñ...');
} else {
    setSelectValueById('f1-life-situation-select2', STEP3_SELECT_2_VALUE);
}

            } catch (err) {
                console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –∑ PIN-–∫–æ–¥–æ–º:', err);
                handleNoSlotsFound(); // –Ø–∫—â–æ –ø—Ä–æ–±–ª–µ–º–∏ –∑ PIN, —Å–ø—Ä–æ–±—É–≤–∞—Ç–∏ –Ω–∞—Å—Ç—É–ø–Ω–µ –º—ñ—Å—Ç–æ
                return;
            }
        }

        console.log('üìù –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞‚Ä¶');

        await wait(weightedRandomDelay(700, 1200));
        if (isScriptStopped) return;


await wait(weightedRandomDelay(1200, 1800));
        if (isScriptStopped) return;

      const allAvailableSlots = [
    ...document.querySelectorAll('input[type="radio"][name="offices"]')
].filter(el =>
    el.id &&
    el.id.includes(' -') &&
    el.offsetParent !== null &&
    !el.disabled
);

// –®—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π —Å–ª–æ—Ç, —è–∫–∏–π –Ω–∞–ª–µ–∂–∏—Ç—å –¥–æ —è–∫–æ–≥–æ—Å—å –∑ –Ω–∞—à–∏—Ö USER_CITIES
let selectedSlot = null;
let selectedCity = null;

for (const city of USER_CITIES) {
    selectedSlot = allAvailableSlots.find(el => el.id.includes(`${city} -`));
    if (selectedSlot) {
        selectedCity = city;
        break;
    }
}

if (selectedSlot) {
      if (!MANUAL_MODE) {
    selectedSlot.click();
    console.log('‚úÖ –û–±—Ä–∞–Ω–æ —Å–ª–æ—Ç:', selectedSlot.id);
      }
    const now = new Date().toLocaleString();
    const msg = `üü¢ ${now}\n‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ —Ç–µ—Ä–º—ñ–Ω —É –Ω–∞—à–æ–º—É –º—ñ—Å—Ç—ñ:\n${selectedSlot.id}\n‚û°Ô∏è ${STEP3_SELECT_1_VALUE} ‚Üí ${STEP3_SELECT_2_VALUE}`;
await wait(weightedRandomDelay(400, 800));
   maybeScrollDown1(); // <--
    await sendTelegramMessage(msg);
        if (MANUAL_MODE) {
          return;
        }


    await wait(weightedRandomDelay(700, 1200));
    await fillFields(step2Fields, 'Step 2');

    const submitBtn = document.getElementById('submitter1');
    if (submitBtn) {
        submitBtn.click();
        console.log('üöÄ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
    }
    console.log('‚úÖ Step 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ');
} else {
    // –ñ–æ–¥–Ω–æ–≥–æ –∑ –Ω–∞—à–∏—Ö –º—ñ—Å—Ç –Ω–µ–º–∞—î —Å–µ—Ä–µ–¥ –¥–æ—Å—Ç—É–ø–Ω–∏—Ö —Ç–µ—Ä–º—ñ–Ω—ñ–≤
    const now = new Date().toLocaleString();
    let msg = '';
    if (allAvailableSlots.length > 0) {
        msg = `üü° ${now}\n‚úîÔ∏è –ó–Ω–∞–π–¥–µ–Ω–æ —Ö–æ—á–∞ –± –æ–¥–∏–Ω —Ç–µ—Ä–º—ñ–Ω (–ù–ï –Ω–∞—à–µ –º—ñ—Å—Ç–æ):\n${allAvailableSlots[0].id}\n‚û°Ô∏è ${STEP3_SELECT_1_VALUE} ‚Üí ${STEP3_SELECT_2_VALUE}`;
    }
    await sendTelegramMessage(msg);
    handleNoSlotsFound();
    return; // –î–∞–ª—ñ –Ω–µ –π–¥–µ–º–æ!
}
    }

    async function handleNoSlotsFound() {
        if (isScriptStopped) {
            console.log('–°–∫—Ä–∏–ø—Ç –∑—É–ø–∏–Ω–µ–Ω–æ, –ø–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —Å–∫–∞—Å–æ–≤–∞–Ω–æ.');
            return;
        }

        currentCityIndex++;
        if (currentCityIndex < USER_CITIES.length) {
            USER_CITY = USER_CITIES[currentCityIndex];
            localStorage.setItem('currentCityIndex', currentCityIndex);
            console.log(`üîÑ –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –¥–æ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞: ${USER_CITY}`);
            const reloadIn = Math.floor(Math.random() * (4500 - 2500 + 1)) + 2500;
            console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${reloadIn / 1000} —Å –¥–ª—è —Å–ø—Ä–æ–±–∏ –Ω–∞—Å—Ç—É–ø–Ω–æ–≥–æ –º—ñ—Å—Ç–∞`);
            setTimeout(() => location.reload(), reloadIn);
        } else {
            console.log('üèÅ –£—Å—ñ –º—ñ—Å—Ç–∞ –ø–µ—Ä–µ–±—Ä–∞–Ω–æ, —Ç–µ—Ä–º—ñ–Ω–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ. –ü–æ—á–∏–Ω–∞—î–º–æ —Å–ø–æ—á–∞—Ç–∫—É.');
            localStorage.setItem('currentCityIndex', '0'); // –°–∫–∏–¥–∞—î–º–æ —ñ–Ω–¥–µ–∫—Å –¥–ª—è –ø–æ—á–∞—Ç–∫—É —Ü–∏–∫–ª—É –∑–Ω–æ–≤—É
            const reloadIn = Math.floor(Math.random() * (4500 - 2500 + 1)) + 2500;
            console.log(`üîÑ –ü–µ—Ä–µ–∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–Ω—è —á–µ—Ä–µ–∑ ${reloadIn / 1000} —Å –¥–ª—è –ø–æ—á–∞—Ç–∫—É –Ω–æ–≤–æ–≥–æ —Ü–∏–∫–ª—É –º—ñ—Å—Ç`);
            setTimeout(() => location.reload(), reloadIn);
        }
    }

    //–ó–∞–ø—É—Å–∫–∞—î–º–æ –æ—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π —Ç—ñ–ª—å–∫–∏ —è–∫—â–æ —Å–∫—Ä–∏–ø—Ç –Ω–µ –∑—É–ø–∏–Ω–µ–Ω–∏–π
    if (!isScriptStopped) {
        runMainScenario();
    }else {
        console.log('–°–∫—Ä–∏–ø—Ç –∑–Ω–∞—Ö–æ–¥–∏—Ç—å—Å—è –≤ –∑—É–ø–∏–Ω–µ–Ω–æ–º—É —Å—Ç–∞–Ω—ñ. –ù–∞—Ç–∏—Å–Ω—ñ—Ç—å "–ü—Ä–æ–¥–æ–≤–∂–∏—Ç–∏" –¥–ª—è –∑–∞–ø—É—Å–∫—É.');
    }
    // –ó–∞–ø—É—Å–∫–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É Telegram –Ω–∞ —Ñ–æ–Ω—ñ

})();
