// ==UserScript==
// @name         Prechodny
// @namespace    Violentmonkey Scripts
// @match        https://portal.minv.sk/wps/portal/domov/ecu/ecu_elektronicke_sluzby/ecu-vysys/*
// @grant        none
// @version      1.3
// @author       -
// @description  –ê–≤—Ç–æ–º–∞—Ç–∏—á–Ω–µ –∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è —Ñ–æ—Ä–º–∏ MINV –∑ –ª–æ–≥–∞–º–∏, —Ä–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è–º CAPTCHA —á–µ—Ä–µ–∑ OpenAI —Ç–∞ –≤–∏–±–æ—Ä–æ–º –º—ñ—Å—Ç–∞ –∑–∞ startsWith ‚Äî —ñ–º—ñ—Ç–∞—Ü—ñ—è ¬´–ª—é–¥—Å—å–∫–æ—ó¬ª –ø–æ–≤–µ–¥—ñ–Ω–∫–∏ (–≥–∞—É—Å–æ–≤—ñ –∑–∞—Ç—Ä–∏–º–∫–∏, –≤–∏–ø–∞–¥–∫–æ–≤—ñ –¥–æ–≤–≥—ñ –ø–∞—É–∑–∏, –ø–µ—Ä–µ–ø–æ—á–∏–Ω–∫–∏). –ü–æ—á–∞—Ç–∫–æ–≤–∏–π —Ñ—É–Ω–∫—Ü—ñ–æ–Ω–∞–ª –ø–æ–≤–Ω—ñ—Å—Ç—é –∑–±–µ—Ä–µ–∂–µ–Ω–æ.
// @run-at       document-end
// ==/UserScript==

(function () {
  'use strict';

  /* ------------------------------------------------------------------
     üîê –ö–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫—ñ –∫–æ–Ω—Å—Ç–∞–Ω—Ç–∏ (–∑–∞–ø–æ–≤–Ω—ñ—Ç—å –ø—ñ–¥ —Å–µ–±–µ)
  ------------------------------------------------------------------ */
 const OPENAI_MODEL = 'gpt-4.1-mini';

const OPENAI_PROJECT_ID = '111proj_NtHUbQd0hgmD2cIO6zb7VRUj';
  const OPENAI_API_KEY =
    '111sk-proj-Uj7LsIwI1fhLt9nqPIp_NsalZlJpBd4bZvyHaAm7MazpRee13ZLcPPs8FDIBm0-wzSDcfv-RNBT3BlbkFJH4mJ-YbnbdKcMcqg_9F9FiRMUSItjM8WpR3-Zo5ygm0I4tgbsR7WmzJftwUrBdZLX429O9odkA';
  const USER_NAME = 'Ivan';
  const USER_SURNAME = 'Rusyn';
  const USER_BIRTHDATE = '01.01.1987';
  // const USER_PHONE = '+421940546125';
  // const USER_EMAIL = 'ivanikrakusinko1a1a22@gmail.com';

    const USER_PHONE = '+421904164965';
  const USER_EMAIL = 'ilariondub4@gmail.com';


  const USER_CITY = 'OCP Trenƒç√≠n'; // –Ω–∞–∑–≤–∞ –º—ñ—Å—Ç–∞ –±–µ–∑ –¥–∞—Ç–∏
  const USER_PASSPORT = 'T';

  const STEP3_SELECT_1_VALUE = '216';   const STEP3_SELECT_2_VALUE = '226'; //Prechodny obnova
  //const STEP3_SELECT_1_VALUE = '216';  const STEP3_SELECT_2_VALUE = '225'; //Prechodny udelenie
  //const STEP3_SELECT_1_VALUE = '216';  const STEP3_SELECT_2_VALUE = '240'; //Prechodny zlucenie rodiny udelenie
  //const STEP3_SELECT_1_VALUE = '216';  const STEP3_SELECT_2_VALUE = '241'; //Prechodny zlucenie rodiny obnova
  //const STEP3_SELECT_1_VALUE = '218';  const STEP3_SELECT_2_VALUE = '224'; //Dlhodoby neobmedzeny
  //const STEP3_SELECT_1_VALUE = '213';  const STEP3_SELECT_2_VALUE = '228'; //Vydaj dokladov
 // const STEP3_SELECT_1_VALUE = '242';  const STEP3_SELECT_2_VALUE = '243'; //Utecenec udelenie
  //const STEP3_SELECT_1_VALUE = '242';  const STEP3_SELECT_2_VALUE = '250'; //Utecenec vydaj

  const TELEGRAM_BOT_TOKEN =
    '8041735564:AAEOPeEFkF3RL4kdF8ZS02980WlKggTuV-E';
  const TELEGRAM_CHAT_ID = '814270232';

  /* ------------------------------------------------------------------
     ‚öôÔ∏è  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è ¬´human-like¬ª –ø–∞—É–∑
  ------------------------------------------------------------------ */
  const config = {
    // –º—ñ–∂ –Ω–∞—Ç–∏—Å–∫–∞–Ω–Ω—è–º–∏ –∫–ª–∞–≤—ñ—à
    typingDelayMin: 50,
    typingDelayMax: 150,
    typingLongPauseChance: 0.12, // 12 % —à–∞–Ω—Å ¬´–∑–∞–¥—É–º–∞—Ç–∏—Å—å¬ª
    typingLongPauseMin: 280,
    typingLongPauseMax: 800,

    // –ø–µ—Ä–µ–¥ / –ø—ñ—Å–ª—è –ø–æ–ª—è
    preFieldDelayMin: 300,
    preFieldDelayMax: 800,
    postFieldDelayMin: 80,
    postFieldDelayMax: 200,

    // —à–∞–Ω—Å –≤–µ–ª–∏–∫–æ—ó –ø–∞—É–∑–∏ –ø—ñ—Å–ª—è –ø–æ–ª—è
    longRestChance: 0.15,
    longRestMin: 600,
    longRestMax: 1800,

    // ¬´–¥–∂–∏—Ç—Ç–µ—Ä¬ª –¥–ª—è –≤—ñ–¥–∫–ª–∞–¥–µ–Ω–∏—Ö –ø–æ–ª—ñ–≤
    delayedFieldJitterMin: 50,
    delayedFieldJitterMax: 250,

    // –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è DOM-–µ–ª–µ–º–µ–Ω—Ç–∞
    waitForElementMaxAttempts: 50,
    waitForElementInterval: 200,
  };

  /* ------------------------------------------------------------------
     üèó  –£—Ç–∏–ª—ñ—Ç–∏
  ------------------------------------------------------------------ */
  const wait = (ms) => new Promise((r) => setTimeout(r, ms));

  // –ü—Å–µ–≤–¥–æ-–≥–∞—É—Å–æ–≤–∏–π (triangular) —Ä–æ–∑–ø–æ–¥—ñ–ª: –±—ñ–ª—å—à—ñ—Å—Ç—å –∑–Ω–∞—á–µ–Ω—å –±–ª–∏–∂—á–µ –¥–æ —Å–µ—Ä–µ–¥–∏–Ω–∏
  function weightedRandomDelay(min, max) {
    const r = (Math.random() + Math.random()) / 2; // 0‚Äì1  –ø—ñ–∫ ‚âà0.5
    return Math.round(min + (max - min) * r);
  }



let lastMessageId = 0;

async function checkTelegram() {
  try {
    console.log('üîÅ –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ Telegram‚Ä¶');

    const res = await fetch(`https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/getUpdates?offset=${lastMessageId + 1}`);
    const data = await res.json();

    if (!data.ok) {
      console.warn('‚ö†Ô∏è –ü–æ–º–∏–ª–∫–∞ Telegram API:', data);
      return;
    }

    const newMessages = data.result.filter(m => m.update_id > lastMessageId);
    if (newMessages.length === 0) {
      console.log('üì≠ –ù–æ–≤–∏—Ö –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å –Ω–µ–º–∞—î');
      return;
    }

    for (const msg of newMessages) {
      const msgId = msg.update_id;
      const msgText = msg.message?.text || '(–±–µ–∑ —Ç–µ–∫—Å—Ç—É)';
      const msgTime = new Date(msg.message?.date * 1000).toLocaleString();

      console.log(`üÜï –ù–æ–≤–µ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è: ${msgId}`);
      console.log(`üïí –ß–∞—Å: ${msgTime}`);
      console.log(`üì© –¢–µ–∫—Å—Ç: ${msgText}`);

      lastMessageId = msgId; // –æ–Ω–æ–≤–ª—é—î–º–æ –æ–¥—Ä–∞–∑—É, —â–æ–± —É–Ω–∏–∫–Ω—É—Ç–∏ –ø–æ–≤—Ç–æ—Ä—ñ–≤

      await wait(1500); // üïì –Ω–µ–≤–µ–ª–∏–∫–∞ –∑–∞—Ç—Ä–∏–º–∫–∞, —â–æ–± —ñ–Ω—à—ñ –ø—Ä–∏—Å—Ç—Ä–æ—ó –≤—Å—Ç–∏–≥–ª–∏

      // üîò –°–∏–º—É–ª—è—Ü—ñ—è –≤–∏–±–æ—Ä—É select2
      const select2 = document.getElementById('f1-life-situation-select2');
      const option = select2?.querySelector(`option[value="${STEP3_SELECT_2_VALUE}"]`);

      if (!select2 || !option) {
        console.warn('‚ùå select2 –∞–±–æ –æ–ø—Ü—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω—ñ');
        continue;
      }

      select2.focus();
      await wait(300);
      option.selected = true;
      triggerEvents(select2);
      select2.dispatchEvent(new Event('click', { bubbles: true }));
      console.log(`üéØ select2 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ –Ω–∞ "${STEP3_SELECT_2_VALUE}"`);
    }

  } catch (err) {
    console.error('‚ùå –ü–æ–º–∏–ª–∫–∞ –≤ checkTelegram:', err);
  }
}



  // üîÅ –ü–µ—Ä–µ–≤—ñ—Ä—è—î –∫–æ–∂–Ω—ñ 15 —Å–µ–∫—É–Ω–¥
function startTelegramLoop() {
  checkTelegram().finally(() => {
    setTimeout(startTelegramLoop, 1000); // üîÅ –∫–æ–∂–Ω—ñ 2 —Å–µ–∫
  });
}



  // –†—ñ–≤–Ω–æ–º—ñ—Ä–Ω–∏–π (–∑–∞–ª–∏—à–∏–≤ –¥–ª—è —Å—É–º—ñ—Å–Ω–æ—Å—Ç—ñ)
  function randomDelay(min, max) {
    return Math.floor(Math.random() * (max - min + 1)) + min;
  }

  function triggerEvents(el) {
    el.dispatchEvent(new Event('input', { bubbles: true }));
    el.dispatchEvent(new Event('change', { bubbles: true }));
    el.dispatchEvent(new Event('blur', { bubbles: true }));
  }

  async function sendTelegramMessage(text) {
    try {
      const url = `https://api.telegram.org/bot${TELEGRAM_BOT_TOKEN}/sendMessage`;
      await fetch(url, {
        method: 'POST',
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify({ chat_id: TELEGRAM_CHAT_ID, text, parse_mode: 'HTML' }),
      });
    } catch (err) {
      console.error('‚ùå Telegram:', err);
    }
  }

  /* ------------------------------------------------------------------
     üìñ  –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –µ–ª–µ–º–µ–Ω—Ç–∞ –≤ DOM
  ------------------------------------------------------------------ */
  function waitForElement(id) {
    return new Promise((resolve) => {
      let attempts = 0;
      const int = setInterval(() => {
        const el = document.getElementById(id);
        if (el) {
          clearInterval(int);
          console.log(`‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
          resolve(el);
        } else if (++attempts >= config.waitForElementMaxAttempts) {
          clearInterval(int);
          console.warn(`‚ùå –ù–µ –∑–Ω–∞–π–¥–µ–Ω–æ –µ–ª–µ–º–µ–Ω—Ç: ${id}`);
          resolve(null);
        }
      }, config.waitForElementInterval);
    });
  }

  /* ------------------------------------------------------------------
     ‚å®Ô∏è  –ù–∞–±—ñ—Ä —Ç–µ–∫—Å—Ç—É ¬´–ø–æ-–ª—é–¥—Å—å–∫–∏¬ª
  ------------------------------------------------------------------ */
  async function typeValue(el, value) {
    el.value = '';
    triggerEvents(el);
    await wait(weightedRandomDelay(60, 140));

    for (const char of String(value)) {
      el.value += char;
      el.dispatchEvent(new Event('input', { bubbles: true }));
      await wait(weightedRandomDelay(config.typingDelayMin, config.typingDelayMax));
      if (Math.random() < config.typingLongPauseChance) {
        await wait(weightedRandomDelay(config.typingLongPauseMin, config.typingLongPauseMax));
      }
    }
    triggerEvents(el);
  }

  /* ------------------------------------------------------------------
     üñº  –†–æ–∑–ø—ñ–∑–Ω–∞–≤–∞–Ω–Ω—è CAPTCHA (GPT-4o Vision)
  ------------------------------------------------------------------ */
  async function imageToBase64(img) {
    return new Promise((res) => {
      const canvas = document.createElement('canvas');
      canvas.width = img.width;
      canvas.height = img.height;
      const ctx = canvas.getContext('2d');
      ctx.drawImage(img, 0, 0);
      res(canvas.toDataURL('image/png'));
    });
  }
 let skipSubmit = false;

  async function recognizeCaptcha(imageDataUrl) {
    console.log('üîç –í—ñ–¥–ø—Ä–∞–≤–∫–∞ –∫–∞–ø—á—ñ –≤ OpenAI‚Ä¶');
    const response = await fetch('https://api.openai.com/v1/chat/completions', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
        Authorization: `Bearer ${OPENAI_API_KEY}`,
        'OpenAI-Beta': 'assistants=v1',
    'OpenAI-Project': OPENAI_PROJECT_ID,
      },
      body: JSON.stringify({
      model: OPENAI_MODEL,
        messages: [
          {
            role: 'user',
            content: [
              {
                type: 'text',
                //text: '–†–æ–∑–ø—ñ–∑–Ω–∞–π –∫–∞–ø—á—É. –í—ñ–¥–ø–æ–≤—ñ–¥—å –º–∞—î –º—ñ—Å—Ç–∏—Ç–∏ –ª–∏—à–µ 5 —Å–∏–º–≤–æ–ª—ñ–≤: [a-z, 0-9]. –ë–µ–∑ –∂–æ–¥–Ω–∏—Ö –ø–æ—è—Å–Ω–µ–Ω—å —á–∏ –¥–æ–¥–∞—Ç–∫–æ–≤–æ–≥–æ —Ç–µ–∫—Å—Ç—É. –í–∏–≤–µ–¥–∏ –ª–∏—à–µ –∫–∞–ø—á—É.'
                text: 'Extract the 5-character CAPTCHA code (a-z, 0-9). Only return the code, nothing else.',

},
              { type: 'image_url', image_url: { url: imageDataUrl } },
            ],
          },
        ],
        max_tokens: 5,
      }),
    });

    const result = await response.json();
    console.log('üì© –í—ñ–¥–ø–æ–≤—ñ–¥—å OpenAI:', result);

 let captchaText = result?.choices?.[0]?.message?.content?.trim();
 if (!captchaText || captchaText.length !== 5) {
   console.warn(`‚ö†Ô∏è –ù–µ–≤—ñ—Ä–Ω–∞ –≤—ñ–¥–ø–æ–≤—ñ–¥—å AI (${captchaText}). –í–∏–∫–æ—Ä. "1"`);
   captchaText = '1';
   skipSubmit = true; // üö´ –ù–ï –Ω–∞–∂–∏–º–∞—Ç–∏ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏"
 } else {
   skipSubmit = false; // ‚úÖ AI –¥–∞–≤ –ø—Ä–∞–≤–∏–ª—å–Ω—É –≤—ñ–¥–ø–æ–≤—ñ–¥—å
 }
    return captchaText;
  }

  async function typeCaptchaLikeHuman(el, text) {
    el.focus();
    el.value = '';
    triggerEvents(el);

    for (const char of text) {
      el.dispatchEvent(new KeyboardEvent('keydown', { key: char, bubbles: true }));
      el.value += char;
      triggerEvents(el);
      await wait(weightedRandomDelay(90, 160));
    }
    triggerEvents(el);
    el.blur();
  }

  async function solveCaptcha() {
    const imgEl = await waitForElement('captchaImage');
    const inputEl = await waitForElement('answer');
    if (!imgEl || !inputEl) return;

    const base64 = await imageToBase64(imgEl);
    const text = await recognizeCaptcha(base64);
    await typeCaptchaLikeHuman(inputEl, text);
    inputEl.style.cssText = 'border:2px solid lime;background:#eaffea;';
    setTimeout(() => (inputEl.style.cssText = ''), 3000);
  }

  /* ------------------------------------------------------------------
     üóí  –ù–∞–ª–∞—à—Ç—É–≤–∞–Ω–Ω—è –ø–æ–ª—ñ–≤
  ------------------------------------------------------------------ */
  const delayedFields = {
    'residence-address-county-0': 2000,
    'residence-address-municipality-0': 2000,
    'residence-address-street-0': 2000,
    'fs13-0-travel-doc-type': 500,
    's42-check-gdpr-info': 700,
    submitter1: 650,
  };

  const step1Fields = [
    ['fs3-name-10', USER_NAME, 'text'],
    ['fs1-surname-10', USER_SURNAME, 'text'],
    [
      'fs7-date-of-birth0',
      async (el) => {
        el.focus();
        await wait(120);
        el.value = USER_BIRTHDATE;
        triggerEvents(el);
        await wait(240);
        // –ø–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è –∫—É—Ä—Å–æ—Ä–∞ —ñ –≤–∏–¥–∞–ª–µ–Ω–Ω—è –∫—Ä–∞–ø–æ–∫ (–æ—Ä–∏–≥. –ª–æ–≥—ñ–∫–∞)
        for (let i = 0; i < 10; i++) {
          el.dispatchEvent(new KeyboardEvent('keydown', { key: 'ArrowLeft', bubbles: true }));
          el.dispatchEvent(new KeyboardEvent('keyup', { key: 'ArrowLeft', bubbles: true }));
          await wait(50);
        }
        for (let i = 0; i < 2; i++) {
          el.dispatchEvent(new KeyboardEvent('keydown', { key: 'Delete', bubbles: true }));
          el.dispatchEvent(new KeyboardEvent('keyup', { key: 'Delete', bubbles: true }));
          await wait(50);
        }
        triggerEvents(el);
      },
      'custom',
    ],
    ['s41-delivery-phone-captcha', USER_PHONE, 'text'],
    ['email0', USER_EMAIL, 'text'],
//    ['loadSecondFormButton', (el) => el.click(), 'custom'],
  ];

  const step2Fields = [
    [USER_CITY, true, 'radio'],
    ['s42-check-gdpr-info', true, 'checkbox'],
    ['fs13-0-travel-doc-type', '1', 'select'],
    ['fs13-travel-doc-number', USER_PASSPORT, 'text'],
    ['submitter1', null, 'click'],
  ];

  /* ------------------------------------------------------------------
     üîÑ  –ó–∞–ø–æ–≤–Ω–µ–Ω–Ω—è –ø–æ–ª—ñ–≤ (human-like)
  ------------------------------------------------------------------ */
  async function fillFields(fields, label) {
    for (const [id, value, type] of fields) {
      let el = document.getElementById(id);
    if (!el && type === 'radio') {
      el = [...document.querySelectorAll('input[type="radio"][name="offices"]')].find(
        (n) => n.id && n.id.startsWith(id),
      );
      if (el) {
                       const matchingSlot = [
                 ...document.querySelectorAll('input[type="radio"][name="offices"]')
               ].find(el =>
                 el.id &&
                 el.id.includes(`${USER_CITY} -`) &&  // ‚Üê –º—ñ—Å—Ç–æ + –ø—Ä–æ–±—ñ–ª + ¬´-¬ª
                 el.offsetParent !== null &&
                 !el.disabled
               );
               const now = new Date().toLocaleString();
               const msg = `üïí ${now}\nüÜî ${matchingSlot.id}\n‚û°Ô∏è ${STEP3_SELECT_1_VALUE} --> ${STEP3_SELECT_2_VALUE}`;
              console.log(msg);
//              await sendTelegramMessage(msg); // üîî –Ω–∞–¥—Å–∏–ª–∞–Ω–Ω—è –≤ Telegram
            }
    }
      if (!el) continue;

      const preDelay = delayedFields[id]
        ? delayedFields[id] + randomDelay(config.delayedFieldJitterMin, config.delayedFieldJitterMax)
        : weightedRandomDelay(config.preFieldDelayMin, config.preFieldDelayMax);
      await wait(preDelay);
      el.focus();
      await wait(weightedRandomDelay(50, 180));

      try {
        switch (type) {
          case 'text':
            await typeValue(el, value);
            break;
          case 'select':
            el.value = value;
            triggerEvents(el);
            break;
          case 'checkbox':
            el.checked = Boolean(value);
            triggerEvents(el);
            break;
          case 'click':
            el.click();
            break;
          case 'custom':
            await value(el);
            break;
          case 'radio':
            el.checked = true;
            triggerEvents(el);
            break;
        }
      } catch (e) {
        console.error(`[${label}] ${id}:`, e);
      }

      await wait(weightedRandomDelay(config.postFieldDelayMin, config.postFieldDelayMax));
      if (Math.random() < config.longRestChance) {
        await wait(weightedRandomDelay(config.longRestMin, config.longRestMax));
      }
    }
  }

  /* ------------------------------------------------------------------
     üöÄ  –û—Å–Ω–æ–≤–Ω–∏–π —Å—Ü–µ–Ω–∞—Ä—ñ–π
  ------------------------------------------------------------------ */
  (async () => {
    console.log('üöÄ –°—Ç–∞—Ä—Ç –∞–≤—Ç–æ–∑–∞–ø–æ–≤–Ω–µ–Ω–Ω—è');
    await wait(weightedRandomDelay(800, 1500));
  // üîò –ù–∞—Ç–∏—Å–∫–∞–Ω–Ω—è loadSecondFormButton –æ–¥—Ä–∞–∑—É –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ
const btn = await waitForElement('langSK');
if (btn) {
  btn.click();
  console.log('üöÄ "loadSecondFormButton" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ –Ω–∞ —Å—Ç–∞—Ä—Ç—ñ');
} else {
  console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ loadSecondFormButton –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞ –Ω–∞–≤—ñ—Ç—å –ø—ñ—Å–ª—è –æ—á—ñ–∫—É–≤–∞–Ω–Ω—è');
}
  await wait(2239); // –¥–∞—î–º–æ —á–∞—Å –ø—ñ—Å–ª—è –∫–ª—ñ–∫—É
    // 1Ô∏è‚É£ CAPTCHA
    await solveCaptcha();


    // 2Ô∏è‚É£ Step 1
    await fillFields(step1Fields, 'Step 1');
if (!skipSubmit) {
  const btn = document.getElementById('loadSecondFormButton');
  if (btn) {
    btn.click();
    console.log('üöÄ "loadSecondFormButton" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
  } else {
    console.warn('‚ùå –ö–Ω–æ–ø–∫–∞ loadSecondFormButton –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
  }
} else {
  console.warn('üö´ –ö–∞–ø—á–∞ –Ω–µ–≤—ñ—Ä–Ω–∞. –ö–Ω–æ–ø–∫–∞ –Ω–µ –Ω–∞—Ç–∏—Å–Ω—É—Ç–∞');
}
    // 3Ô∏è‚É£ –ß–µ–∫–∞—î–º–æ —Å–µ–ª–µ–∫—Ç –º—ñ—Å—Ç
    const triggerStep2Button = await waitForElement('f1-life-situation-select2');
    if (!triggerStep2Button) {
      console.error('‚ùå select –¥–ª—è –º—ñ—Å—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ');
      return;
    }

    triggerStep2Button.addEventListener(
      'change',
      async () => {
        await wait(weightedRandomDelay(1700, 2500));
        await fillFields(step2Fields, 'Step 2');
        const submitBtn = document.getElementById('submitter1');
        if (submitBtn) {
          submitBtn.click();
          console.log('üöÄ "–ù–∞–¥—ñ—Å–ª–∞—Ç–∏" –Ω–∞—Ç–∏—Å–Ω—É—Ç–æ');
        }
        console.log('‚úÖ Step 2 –∑–∞–≤–µ—Ä—à–µ–Ω–æ');

        await wait(1546);

        // —à—É–∫–∞—î–º–æ –ø–µ—Ä—à–∏–π –¥–æ—Å—Ç—É–ø–Ω–∏–π —Å–ª–æ—Ç —É –ø–æ—Ç—Ä—ñ–±–Ω–æ–º—É –º—ñ—Å—Ç—ñ
        // const matchingSlot = [...document.querySelectorAll('input[type="radio"][name="offices"]')].find(
        //   (el) =>
        //     el.id &&
        //     el.id.includes(USER_CITY) &&
        //     el.offsetParent !== null &&
        //     !el.disabled,
        // );

        const matchingSlot = [
  ...document.querySelectorAll('input[type="radio"][name="offices"]')
].find(el =>
  el.id &&
  el.id.includes(`${USER_CITY} -`) &&  // ‚Üê –º—ñ—Å—Ç–æ + –ø—Ä–æ–±—ñ–ª + ¬´-¬ª
  el.offsetParent !== null &&
  !el.disabled
);

        if (matchingSlot) {
          matchingSlot.click();


          console.log('‚úÖ –û–±—Ä–∞–Ω–æ —Å–ª–æ—Ç:', matchingSlot.id);
        } else {
          console.log('‚ùå –°–ª–æ—Ç –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –¥–ª—è –º—ñ—Å—Ç–∞:', USER_CITY);
        }
      },
      { once: true },
    );

    // 4Ô∏è‚É£ PIN-–∫–æ–¥ ‚Üí –¥–æ–≤–∞–Ω—Ç–∞–∂—É—î–º–æ selects
    const pinCodeEl = await waitForElement('pin-code');
    if (pinCodeEl) {
      pinCodeEl.addEventListener(
        'input',
        async () => {
          console.log('üì® PIN –≤–≤–µ–¥–µ–Ω–æ ‚Äî —á–µ–∫–∞—î–º–æ 10 —Å‚Ä¶');
          await wait(12056);

          const select1 = document.getElementById('f1-life-situation-select1');
          select1?.querySelector(`option[value="${STEP3_SELECT_1_VALUE}"]`)?.setAttribute('selected', 'selected');
          triggerEvents(select1);
          console.log('‚úÖ select1 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');

          await wait(1570);

          startTelegramLoop(); // üîÅ –°—Ç–∞—Ä—Ç –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å

//           const select2 = document.getElementById('f1-life-situation-select2');
//           select2?.querySelector(`option[value="${STEP3_SELECT_2_VALUE}"]`)?.setAttribute('selected', 'selected');
//           triggerEvents(select2);
//           console.log('‚úÖ select2 –≤—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ');
        },
        { once: true },
      );
    }

    console.log('üìù –û—á—ñ–∫—É–≤–∞–Ω–Ω—è –≤–∏–±–æ—Ä—É –º—ñ—Å—Ç–∞‚Ä¶');
  })();
})();
